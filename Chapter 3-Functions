Functions
=========
A function is like a mini-program within a program. Type this program into the file editor and save it as helloFunc.py:

➊ def hello():
➋     print('Howdy!')
       print('Howdy!!!')
       print('Hello there.')
➌ hello()
   hello()
   hello()

The first line is a def statement ➊, which defines a function named hello(). The code in the block that follows the def 
statement ➋ is the body of the function. This code is executed when the function is called, not when the function is first 
defined.The hello() lines after the function ➌ are function calls. In code, a function call is just the function’s name 
followed by parentheses, possibly with some number of arguments in between the parentheses. When you run this program, the 
output looks like this:

Howdy!
Howdy!!!
Hello there.
Howdy!
Howdy!!!
Hello there.
Howdy!
Howdy!!!
Hello there.
def Statements with Parameters
-----------------------------
When you call the print() or len() function, you pass in values, called arguments in this context, by typing them between the 
parentheses.Type this example into the file editor and save it as helloFunc2.py:

➊ def hello(name):
➋     print('Hello ' + name)

➌ hello('Alice')
  hello('Bob')
When you run this program, the output looks like this:

Hello Alice
Hello Bob
Return Values and return Statements
-----------------------------------
A return statement consists of the following:
*The return keyword
*The value or expression that the function should return
Type this code into the file editor and save it as magic8Ball.py:

➊ import random
➋ def getAnswer(answerNumber):
➌     if answerNumber == 1:
           return 'It is certain'
       elif answerNumber == 2:
           return 'It is decidedly so'
       elif answerNumber == 3:
           return 'Yes'
       elif answerNumber == 4:
           return 'Reply hazy try again'
       elif answerNumber == 5:
           return 'Ask again later'
       elif answerNumber == 6:
           return 'Concentrate and ask again'
       elif answerNumber == 7:
           return 'My reply is no'
       elif answerNumber == 8:
           return 'Outlook not so good'
       elif answerNumber == 9:
           return 'Very doubtful'

➍ r = random.randint(1, 9)
➎ fortune = getAnswer(r)
➏ print(fortune)
Note that since you can pass return values as an argument to another function call, you could shorten these three lines:

r = random.randint(1, 9)
fortune = getAnswer(r)
print(fortune)
to this single equivalent line:

print(getAnswer(random.randint(1, 9)))
The None Value
--------------
In Python there is a value called None, which represents the absence of a value. None is the only value of the NoneType data type.
To see this in action, enter the following into the interactive shell:

>>> spam = print('Hello!')
Hello!
>>> None == spam
True
Keyword Arguments and print()
-----------------------------
If you ran the following program:

print('Hello')
print('World')
the output would look like this:

Hello
World
For example, if the program were this:

print('Hello', end='')
print('World')
the output would look like this:

HelloWorld
Enter the following into the interactive shell:

>>> print('cats', 'dogs', 'mice')
cats dogs mice
But you could replace the default separating string by passing the sep keyword argument. Enter the following into the interactive shell:

>>> print('cats', 'dogs', 'mice', sep=',')
cats,dogs,mice

Local and Global Scope
----------------------
Parameters and variables that are assigned in a called function are said to exist in that function’s local scope. Variables 
that are assigned outside all functions are said to exist in the global scope. A variable that exists in a local scope is 
called a local variable, while a variable that exists in the global scope is called a global variable. A variable must be 
one or the other; it cannot be both local and global.
Scopes matter for several reasons:
*Code in the global scope cannot use any local variables.
*However, a local scope can access global variables.
*Code in a function’s local scope cannot use variables in any other local scope.
*You can use the same name for different variables if they are in different scopes. That is, there can be a local variable 
named spam and a global variable also named spam.
Local Variables Cannot Be Used in the Global Scope
--------------------------------------------------
Consider this program, which will cause an error when you run it:

def spam():
    eggs = 31337
spam()
print(eggs)
If you run this program, the output will look like this:

Traceback (most recent call last):
  File "C:/test3784.py", line 4, in <module>
    print(eggs)
NameError: name 'eggs' is not defined
Local Scopes Cannot Use Variables in Other Local Scopes
--------------------------------------------------------
A new local scope is created whenever a function is called, including when a function is called from another function. Consider this program:

  def spam():
➊    eggs = 99
➋    bacon()
➌    print(eggs)

  def bacon():
      ham = 101
➍    eggs = 0

➎ spam()

When the program starts, the spam() function is called ➎, and a local scope is created. The local variable eggs ➊ is set to 
99. Then the bacon() function is called ➋, and a second local scope is created. Multiple local scopes can exist at the same 
time. In this new local scope, the local variable ham is set to 101, and a local variable eggs—which is different from the one
in spam()’s local scope—is also created ➍ and set to 0. When bacon() returns, the local scope for that call is destroyed. The 
program execution continues in the spam() function to print the value of eggs ➌, and since the local scope for the call to 
spam() still exists here, the eggs variable is set to 99. This is what the program prints.
Global Variables Can Be Read from a Local Scope
-----------------------------------------------
Consider the following program:

def spam():
    print(eggs)
eggs = 42
spam()
print(eggs)
This is why 42 is printed when the previous program is run.
Local and Global Variables with the Same Name
---------------------------------------------
 To see what happens, type the following code into the file editor and save it as sameName.py:

   def spam():
➊     eggs = 'spam local'
       print(eggs) # prints 'spam local'
   def bacon():

➋     eggs = 'bacon local'
       print(eggs) # prints 'bacon local'
       spam()
       print(eggs) # prints 'bacon local'

➌ eggs = 'global'
   bacon()
   print(eggs) # prints 'global'
When you run this program, it outputs the following:

bacon local
spam local
bacon local
global
The global Statement
--------------------
 For example, type the following code into the file editor and save it as sameName2.py:

  def spam():
➊    global eggs
➋    eggs = 'spam'

  eggs = 'global'
  spam()
  print(eggs)
When you run this program, the final print() call will output this:

spam
