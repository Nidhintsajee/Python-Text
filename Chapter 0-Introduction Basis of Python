Whom Is This Book For?
This book is not for those people. It’s for everyone else.
you will learn the basics of programming so that you can automate simple tasks such as the following:
Moving and renaming thousands of files and sorting them into folders. Filling out online forms, no typing required.Downloading 
files or copy text from a website whenever it updates.Having your computer text you custom notifications.Updating or 
formatting Excel spreadsheets.Checking your email and sending out prewritten responses.These tasks are simple but 
time-consuming for humans, and they’re often so trivial or specific that there’s no ready-made software to perform them. 
Armed with a little bit of programming knowledge, you can have your computer do these tasks for you.

This book is not designed as a reference manual; it’s a guide for beginners. The coding style sometimes goes against best 
practices (for example, some programs use global variables), but that’s a trade-off to make the code simpler to learn. 
This book is made for people to write throwaway code, so there’s not much time spent on style and elegance. Sophisticated 
programming concepts—like object-oriented programming, list comprehensions, and generators—aren’t covered because of the 
complexity they add. Veteran programmers may point out ways the code in this book could be changed to improve efficiency, 
but this book is mostly concerned with getting programs to work with the least amount of effort.

What Is Programming?
Programming is simply the act of entering instructions for the computer to perform. These instructions might crunch some 
numbers, modify text, look up information in files, or communicate with other computers over the Internet.

➊ passwordFile = open('SecretPasswordFile.txt')
➋ secretPassword = passwordFile.read()
➌ print('Enter your password.')
  typedPassword = input()
➍ if typedPassword == secretPassword:
➎    print('Access granted')
➏    if typedPassword == '12345':
➐       print('That password is one that an idiot puts on their luggage.')
  else:
➑    print('Access denied')

You might not know anything about programming, but you could probably make a reasonable guess at what the previous code 
does just by reading it. First, the file SecretPasswordFile.txt is opened ➊, and the secret password in it is read ➋. 
Then, the user is prompted to input a password (from the keyboard) ➌. These two passwords are compared ➍, and if they’re 
the same, the program prints Access granted to the screen ➎. Next, the program checks to see whether the password is 
12345 ➏ and hints that this choice might not be the best for a password ➐. If the passwords are not the same, the program 
prints Access denied to the screen ➑.

What Is Python?
Python refers to the Python programming language (with syntax rules for writing what is considered valid Python code) and 
the Python interpreter software that reads source code (written in the Python language) and performs its instructions. 
The Python interpreter is free to download from http://python.org/, and there are versions for Linux, OS X, and Windows.
The name Python comes from the surreal British comedy group Monty Python, not from the snake. Python programmers are 
affectionately called Pythonistas, and both Monty Python and serpentine references usually pepper Python tutorials and 
documentation.

Programmers Don’t Need to Know Much Math. Just because Sudoku involves numbers doesn’t mean you have to be good at math to figure out the solution. The same is true 
of programming. Like solving a Sudoku puzzle, writing programs involves breaking down a problem into individual, detailed 
steps. Similarly, when debugging programs (that is, finding and fixing errors), you’ll patiently observe what the program 
is doing and find the cause of the bugs. And like all skills, the more you program, the better you’ll become.

Programming is a creative task, somewhat like constructing a castle out of LEGO bricks. You start with a basic idea of what 
you want your castle to look like and inventory your available blocks. Then you start building.
The difference between programming and other creative activities is that when programming, you have all the raw materials you
need in your computer; the activity is still a lot of fun.

On Ubuntu Linux, open a Terminal and run the command uname -m. A response of i686 means 32-bit, and x86_64 means 64-bit.
If you’re running Ubuntu, you can install Python from the Terminal by following these steps:
Open the Terminal window.
Enter sudo apt-get install python3.
Enter sudo apt-get install idle3.
Enter sudo apt-get install python3-pip.

Starting IDLE
While the Python interpreter is the software that runs your Python programs, the interactive development environment (IDLE) 
software is where you’ll enter your programs, much like a word processor. Let’s start IDLE now.
On Ubuntu, select Applications▸Accessories▸Terminal and then enter idle3. (You may also be able to click Applications at the 
top of the screen, select Programming, and then click IDLE 3.)
The Interactive Shell
No matter which operating system you’re running, the IDLE window that first appears should be mostly blank except for text 
that looks something like this:
Python 3.4.0 (v3.4.0:04f714765c13, Mar 16 2014, 19:25:23) [MSC v.1600 64
bit (AMD64)] on win32Type "copyright", "credits" or "license()" for more
information.
>>>
This window is called the interactive shell. A shell is a program that lets you type instructions into the computer, much
like the Terminal or Command Prompt on OS X and Windows, respectively. Python’s interactive shell lets you enter instructions for 
the Python interpreter software to run. The computer reads the instructions you enter and runs them immediately.
For example, enter the following into the interactive shell next to the >>> prompt:
>>> print('Hello world!')
After you type that line and press ENTER, the interactive shell should display this in response:

>>> print('Hello world!')
Hello world!
How to Find Help
Solving programming problems on your own is easier than you might think. If you’re not convinced, then let’s cause an error on 
purpose: Enter '42' + 3 into the interactive shell. You don’t need to know what this instruction means right now, but the result
should look like this:

  >>> '42' + 3
➊ Traceback (most recent call last):
    File "<pyshell#0>", line 1, in <module>
      '42' + 3
➋ TypeError: Can't convert 'int' object to str implicitly
  >>>
The error message ➋ appeared here because Python couldn’t understand your instruction. The traceback part ➊ of the error 
message shows the specific instruction and line number that Python had trouble with. If you’re not sure what to make of a 
particular error message, search online for the exact error message. Enter “TypeError: Can’t convert ‘int’ object to str 
implicitly” (including the quotes) into your favorite search engine, and you should see tons of links explaining what the 
error message means and what causes it, as shown in Figure 2.
 The Google results for an error message can be very helpful.
You’ll often find that someone else had the same question as you and that some other helpful person has already answered it.
No one person can know everything about programming, so an everyday part of any software developer’s job is looking up answers
to technical questions.

List the version of Python you’re using. (There are some key differences between version 2 Python interpreters and version 3 
Python interpreters.) Also, say which operating system and version you’re running.
If the error came up after you made a change to your code, explain exactly what you changed.
Say whether you’re able to reproduce the error every time you run the program or whether it happens only after you perform 
certain actions. Explain what those actions are, if so.
Always follow good online etiquette as well. For example, don’t post your questions in all caps or make unreasonable demands 
of the people trying to help you.
